---
title: "Real-time AI for surgery with NVIDIA-Holoscan platform"
subtitle: ""

format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    controls-layout: bottom-right
    preview-links: auto
    code-block-height: 650px
    code-line-numbers: true
    code-overflow: scroll
    default-image-extension: svg
    fig-align: center
    logo: favicon.svg
    theme: dark
    #css:
      #- css/default.css
      #- css/callouts-html.css
    #footer: <https://quarto.org>
  gfm:
    author: Miguel Xochicale
---

# {.title-slide .centeredslide background-iframe="https://saforem2.github.io/grid-worms-animation/" loading="lazy"}

::: {style="background-color: rgba(22,22,22,0.75); border-radius: 10px; text-align:center; padding: 0px; padding-left: 1.5em; padding-right: 1.5em; max-width: min-content; min-width: max-content; margin-left: auto; margin-right: auto; padding-top: 0.2em; padding-bottom: 0.2em; line-height: 1.5em!important;"}
<span style="color:#939393; font-size:1.5em; font-weight: bold;">Real-time AI for surgery</span>  
<span style="color:#939393; font-size:1.5em; font-weight: bold;">with NVIDIA-Holoscan platform</span>  
<span style="color:#777777; font-size:1.2em; font-weight: normal;">ARC Collaborations, UCL</span>  
[<br>&nbsp;]{style="padding-bottom: 0.5rem;"}  
[{{< fa solid home >}}](http://mxochicale.github.io/) Miguel Xochicale, PhD     
[[{{< fa brands github >}} `mxochicale`](https://github.com/mxochicale/real-time-ai-for-surgery-with-NVIDIA-Holoscan-platform)]{style="border-bottom: 0.5px solid #00ccff;"}
:::

::: footer
[2024-04-20 @ [Link for grid-worms-animation 2023](https://github.com/saforem2/grid-worms-animation/)]{.dim-text style="text-align:left;'}
:::

::: {.notes}
First slide
:::


## Content
1. [My background](#sec-ov)
2. [Endoscopic Pituitary Tumor Surgery]
3. [Holoscan-platform](#sec-hp)
4. [End-to-end-apps for surgery](#sec-e2e)
5. [Demos](#sec-demos)
6. [Event announcement](#sec-aob)

<!--
6. [Acknowledgement](#sec-aob)
-->


::: {.notes}
Content
:::






## My background
::: {#fig-mb}

![](figures/00_template-vector-images/drawing-v00.svg)

:::

::: {.notes}
My background
:::







## :medical_symbol: Endoscopic Pituitary Tumor Surgery
{{< video https://www.youtube.com/embed/EwlRdxokdGk
    start="1269"
    width="85%" 
    height="85%"
>}}

::: {.notes}

94,961 views  20 Nov 2012
Barrow Neurological Institute Neurosurgeon Andrew S. Little, MD, demonstrates the process of removing a tumor of the pituitary gland using minimally-invasive endoscopic neurosurgery.
https://www.youtube.com/watch?app=desktop&v=EwlRdxokdGk

553,519 views  28 May 2017
The pituitary gland is located at the bottom of your brain and above the inside of your nose. Endoscopic pituitary surgery (also called transsphenoidal endoscopic surgery) is a minimally invasive surgery performed through the nose and sphenoid sinus to remove pituitary tumors.
https://www.youtube.com/watch?v=lwmgNLwt_ts


^[Mao, Zhehua, Adrito Das, Mobarakol Islam, Danyal Z. Khan, Simon C. Williams, John G. Hanrahan, Anouk Borg et al. "PitSurgRT: real-time localization of critical anatomical structures in endoscopic pituitary surgery." International Journal of Computer Assisted Radiology and Surgery (2024): 1-8.].

:::






## Real-time AI Applications for Surgery
::: {#fig-template}

![](figures/00_template-vector-images/drawing-v00.svg)

This text is part of the caption of this figure. Note that default size of presentation slides is 1200 x 700.
:::

::: {.notes}
Speaker notes go here.
:::







## Holoscan platform
:::: {.columns}

::: {.column width="50%"}
Holoscan-SDK


:::

::: {.column width="50%"}
Clara-AGX


:::

::::

::: {.notes}
Speaker notes go here.
:::







## End-to-end python-based applications {.smaller}
::: {.panel-tabset}

### Code-block A

```{.python}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

### Code-block B

```{.python}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

:::

::: {.notes}
Speaker notes go here.
:::










## Template for figures 
::: {#fig-template}

![](figures/00_template-vector-images/drawing-v00.svg)

This text is part of the caption of this figure. Note that default size of presentation slides is 1200 x 700.
:::

::: {.notes}
Speaker notes go here.
:::








## Template for tabsets {.smaller}
::: {.panel-tabset}

### Tab A

Content for `Tab A`

### Tab B

Content for `Tab B`

:::

::: {.notes}
Speaker notes go here.
:::




## Template for tabsets with code-blocks {.smaller}
::: {.panel-tabset}

### Code-block A

```{.python}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

### Code-block B

```{.python}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

:::

::: {.notes}
Speaker notes go here.
:::







## Multiple columns
:::: {.columns}

::: {.column width="50%"}
Left column


:::

::: {.column width="50%"}
Right column


:::

::::

::: {.notes}
Speaker notes go here.
:::






## Multiple columns with code-blocks {.smaller}
:::: {.columns}

::: {.column width="50%"}
```{.python}
#Left column
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
:::

::: {.column width="50%"}
```{.python}
#Right column
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
:::

::::

::: {.notes}
Speaker notes go here.
:::







## :construction: Line Highlighting (10 lines)

```{.python filename="matplotlib.py" code-line-numbers="|6-9"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

::: {.notes}
Speaker notes go here.
:::











## :construction: Line Highlighting (N lines)
```{.python filename="unit-test-example.py" code-line-numbers="|30-36"}
import datetime
import unittest

import pandas as pd
import pandas_datareader.data as web

def get_stock_data(ticker):
    """pull data from stooq"""
    df = web.DataReader(ticker, 'yahoo')
    return df

class TestGetStockData(unittest.TestCase):
    @classmethod
    def setUpClass(self):
        """We only want to pull this data once for each TestCase since it is an expensive operation"""
        self.df = get_stock_data('^DJI')

    def test_columns_present(self):
        """ensures that the expected columns are all present"""
        self.assertIn("Open", self.df.columns)
        self.assertIn("High", self.df.columns)
        self.assertIn("Low", self.df.columns)
        self.assertIn("Close", self.df.columns)
        self.assertIn("Volume", self.df.columns)

    def test_non_empty(self):
        """ensures that there is more than one row of data"""
        self.assertNotEqual(len(self.df.index), 0)

    def test_high_low(self):
        """ensure high and low are the highest and lowest in the same row"""
        ohlc = self.df[["Open","High","Low","Close"]]
        highest = ohlc.max(axis=1)
        lowest = ohlc.min(axis=1)
        self.assertTrue(ohlc.le(highest, axis=0).all(axis=None))
        self.assertTrue(ohlc.ge(lowest, axis=0).all(axis=None))

    def test_most_recent_within_week(self):
        """most recent data was collected within the last week"""
        most_recent_date = pd.to_datetime(self.df.index[-1])
        self.assertLessEqual((datetime.datetime.today() - most_recent_date).days, 7)

unittest.main()
```

::: {.notes}
Reference for the code!

https://machinelearningmastery.com/a-gentle-introduction-to-unit-testing-in-python/
:::







## :video_camera: Embedding Yotube Video
{{< video https://www.youtube.com/embed/hbf7Ai3jnxY
    start="1269"
    width="85%" 
    height="85%"
>}}

::: {.notes}
Available aspect ratios include 1x1, 4x3, 16x9 (the default), and 21x9.

Further details to render videos
https://quarto.org/docs/authoring/videos.html
:::








<!--
adding HTML comment syntax to not render the following lines
## Embedding a video.mp4 {background-video="video.mp4" background-video-loop="true" background-video-muted="true" background-opacity=0}
-->
